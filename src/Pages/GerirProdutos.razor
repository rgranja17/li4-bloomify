@page "/paineladmin/produtos"
@using Bloomify.Shared

@inject AuthenticationStateProvider AuthProvider
@inject IProductService db


@if (tipo == null)
{
    <div class="flex justify-center items-center h-screen">
        <span>Loading...</span>
    </div>
}
@if(tipo != "Admin")
{
    <Error403 />
}else
{
<div class="bg-white min-h-screen flex-col flex overflow-hidden">
    <NavBarUtilizador/>
    
    <div class="relative flex-auto flex items-center justify-center">
        <div class="absolute inset-0 w-full h-full overflow-hidden">
            <svg viewBox="0 0 1280 672" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-full h-full object-cover">
                <g filter="url(#filter0_f_32_4)">
                    <path d="M567.097 1641.67C1087.23 1781.04 1602.84 1543.37 1718.74 1110.82C1834.65 678.269 1506.95 214.636 986.815 75.2658C466.679 -64.1041 -48.9306 173.566 -164.832 606.118C-280.734 1038.67 46.962 1502.3 567.097 1641.67Z" fill="url(#paint0_linear_32_4)"/>
                </g>
                <defs>
                    <filter id="filter0_f_32_4" x="-223.138" y="0.393372" width="2000.19" height="1716.15" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                        <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                        <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
                        <feGaussianBlur stdDeviation="25" result="effect1_foregroundBlur_32_4"/>
                    </filter>
                    <linearGradient id="paint0_linear_32_4" x1="777" y1="100" x2="777" y2="1000" gradientUnits="userSpaceOnUse">
                        <stop offset="0%" stop-color="#3F784C" stop-opacity="0"/>
                        <stop offset="50%" stop-color="#3F784C" stop-opacity="0.6"/>
                        <stop offset="100%" stop-color="#3F784C" stop-opacity="0.95"/>
                    </linearGradient>
                </defs>
            </svg>
        </div>

        <div class="container flex flex-col mx-auto px-4 sm:px-6 lg:px-8 items-center justify-center">
            <div class="text-center mt-4">
                <h1 class="text-2xl sm:text-3xl md:text-4xl lg:text-5xl xl:text-7xl 2xl:text-8xl font-black font-outfit text-custom_green">
                    Gerir Produtos
                </h1>
            </div>           

            <div class="grid grid-cols-1 sm:grid-cols-2  gap-6 mt-2 w-full place-items-center">
                @foreach (var produto in produtos){
                    <GestaoProduto product=produto />
                }                
            </div>
        </div>

    </div>
</div>
}


@code {
    private string tipo;
    private List<ProductModel> produtos = new List<ProductModel>();

    private async Task CarregarProdutos()
    {
        produtos = await db.GetProducts();
    }


    protected override async Task OnInitializedAsync()
    {
        var auth = (AuthProvider)AuthProvider;
        string? role = await auth.GetTipo();

        if(role != null){
            tipo = role;
        }

        await CarregarProdutos();
    }
}